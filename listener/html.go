/*----------------------------------------------------------------
 *  Copyright (c) ThoughtWorks, Inc.
 *  Licensed under the Apache License, Version 2.0
 *  See LICENSE in the project root for license information.
 *----------------------------------------------------------------*/
package listener

var html = `
<html>

<head>
    <link href="https://getgauge.io/assets/images/favicons/favicon.ico" rel="shortcut icon" type="image/ico">
    <link href="https://fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet">
    <title>Flash - {{ .Project }}</title>
</head>

<body>
    <div class="statusContainer"><span id="status">Execution Status: Running</span><span class="info">Generated by Gauge on {{ .Timestamp }}</span></div>
    <div class="menu">
        <div class="toggleAll"><input id="collapse" type="button" onclick="toggleAll(this)" value="Hide all" /></div>
        <div class="statsContainer">
            <p>
                <span>
            <span class="entity">Specifications: </span><span class="stat" id="specPassedCount">0 passed, </span><span class="stat" id="specFailedCount">0 failed, </span><span class="stat" id="specProgressCount">0 running</span>
                </span>
                <span> | </span>
                <span>
            <span class="entity">Scenarios: </span><span class="stat" id="scenarioPassedCount">0 passed, </span><span class="stat" id="scenarioFailedCount">0 failed, </span><span class="stat" id="scenarioProgressCount">0 running</span>
                </span>
            </p>
        </div>
    </div>
    <ul id="specs"></ul>
    <script type="text/javascript">
        const toggleAll = (element) => {
            let hide = false;
            let value = "Hide all";
            if (element.value == "Hide all") {
                hide = true;
                value = "Show all"
            }
            document.querySelectorAll(".scenarios").forEach(function(e) {
                if (hide) e.hidden = true;
                else e.hidden = false;
            });
            document.querySelectorAll(".toggle").forEach(function(e) {
                if (hide) e.innerHTML = "show";
                else e.innerHTML = "hide";
            });
            element.value = value
        };

        const toggle = (id) => {
            var element = document.getElementById(id);
            var toggleElement = document.getElementById("toggle" + id);
            if (element.hidden) toggleElement.innerHTML = "hide";
            else toggleElement.innerHTML = "show";
            element.hidden = !element.hidden;
        };

        const initWS = () => {
            const socket = new WebSocket("ws://" + window.location.host + "/progress");
            socket.onopen = () => console.log("Socket opened");
            socket.onmessage = function(e) {
                const data = JSON.parse(e.data);
                try {
                    if (data.Type == "end") document.getElementsByClassName("menu")[0].style.background = data.Status == "fail" ? "#e73e48" : "#5e7d00";
                    else if (data.Type == "spec") handleSpecEvent(data, data.Status);
                    else if (data.Type == "scenario") handleScenarioEvent(data, data.Status);
                    else handleStepEvent(data, data.Status);
                } finally {
                    updateCounts(counts);
                }
            };
            socket.onclose = () => {
                console.log("Socket closed");
                document.getElementById("status").innerHTML = "Execution Status: Finished. <span class=\"warning\">This report will not be updated or stored.</span>"
            }
            return socket;
        };

        const handleSpecEvent = (data, statusClass) => {
            const id = getID();
            if (specMap[data.FileName]) {
                document.getElementById(specMap[data.FileName].id).getElementsByTagName("li")[0].className = statusClass;
                counts.specProgress--;
                if (statusClass == "fail") counts.specFailed++;
                else counts.specPassed++;
                return;
            }
            const specs = document.getElementById("specs"),
                scnId = getID();
            const hideScenarios = document.getElementById("collapse").checked;
            specs.innerHTML += "<div class=\"spec\" id=\"" + id + "\"><li class=\"" + statusClass + "\"><span class=\"specName\"># " + data.Name + "</span><span class=\"toggle\" id=\"toggle" + scnId + "\" onClick=\"toggle('" + scnId + "')\">hide</span><ul" + (hideScenarios ? " hidden" : " ") + " class=\"scenarios\" id=\"" + scnId + "\"></ul></li></div>";
            specMap[data.FileName] = {
                "id": id,
                "scenarios": {},
            };
            counts.specProgress++;
        };

        const handleScenarioEvent = (data, statusClass) => {
            const id = getID();
            if (specMap[data.SpecFileName].scenarios[data.Name]) {
                const element = specMap[data.SpecFileName].scenarios[data.Name];
                document.getElementById(element.id).getElementsByTagName("li")[0].className = statusClass;
                counts.scenarioProgress--;
                if (statusClass == "fail") counts.scenarioFailed++;
                else counts.scenarioPassed++;
                return;
            }
            specMap[data.SpecFileName].scenarios[data.Name] = {
                "id": id,
                "steps": {},
            };
            const element = document.getElementById(specMap[data.SpecFileName].id).getElementsByTagName("ul")[0];
            element.insertAdjacentHTML("beforeend", "<div class=\"scenario\" id=\"" + id + "\"><li class=\"" + statusClass + "\"><span class=\"scenarioName\">## " + data.Name + "</span><ul></ul></li></div>");
            counts.scenarioProgress++;
        };

        const handleStepEvent = (data, statusClass) => {
            const id = getID();
            if (specMap[data.SpecFileName].scenarios[data.ScenarioName].steps[data.Name]) {
                const element = specMap[data.SpecFileName].scenarios[data.ScenarioName].steps[data.Name];
                document.getElementById(element.id).getElementsByTagName("li")[0].className = statusClass;
                return;
            }
            specMap[data.SpecFileName].scenarios[data.ScenarioName].steps[data.Name] = {
                "id": id
            };
            const element = document.getElementById(specMap[data.SpecFileName].scenarios[data.ScenarioName].id).getElementsByTagName("ul")[0];
            element.insertAdjacentHTML("beforeend", "<div class=\"step\" id=\"" + id + "\"><li class=\"" + statusClass + "\"><span class=\"stepName\">* " + data.Name + "</span><ul></ul></li></div>");
        };

        if (window.WebSocket === undefined) document.getElementById("specs").innerHTML = "Your browser does not support WebSockets";
        else initWS();
        const specMap = {};
        const counts = {
            "specFailed": 0,
            "specPassed": 0,
            "specProgress": 0,
            "scenarioFailed": 0,
            "scenarioPassed": 0,
            "scenarioProgress": 0
        };

        const getID = () => Math.random().toString(36).substring(7);

        const updateCounts = (counts) => {
            document.getElementById("specFailedCount").innerHTML = counts.specFailed + " failed, ";
            document.getElementById("specPassedCount").innerHTML = counts.specPassed + " passed, ";
            document.getElementById("specProgressCount").innerHTML = counts.specProgress + " running";
            document.getElementById("scenarioFailedCount").innerHTML = counts.scenarioFailed + " failed, ";
            document.getElementById("scenarioPassedCount").innerHTML = counts.scenarioPassed + " passed, ";
            document.getElementById("scenarioProgressCount").innerHTML = counts.scenarioProgress + " running";
        };
    </script>
    <style>
        body {
            font-family: 'Source Code Pro', monospace;
            margin: 0px;
            line-height: 20px;
            background: #eeeeee;
            font-size: 13px;
        }

        .spec {
            margin-bottom: 0.2%;
            border-bottom: 1px solid #eaeaea;
        }

        .spec:hover {
            background: #f1f1f1;
        }

        li {
            list-style: none;
        }

        ul {
            margin-left: -30px;
        }

        ul ul {
            margin-left: -20px;
        }

        ul ul ul {
            margin-left: -20px;
        }

        .toggle {
            cursor: pointer;
            font-size: 10px;
            color: #9e9e9e;
            margin-left: 15px;
            display: none;
            padding-right: 5px;
            padding-left: 5px;
            border: 0.5px solid #cccccc;
            line-height: 0px;
        }

        .specName {
            display: inline-block;
        }

        .scenarioName {
            display: inline-block;
        }

        .stepName {
            display: inline-block;
        }

        .toggleAll {
            margin-right: 5px;
            font-size: 13px;
            float: right;
        }

        #collapse {
            cursor: pointer;
            color: #ececec;
            border: 0.5px solid #ececec;
            border-radius: 5px;
            background: transparent;
            min-width: 60px;
        }

        #collapse:focus {
            outline: 0;
        }

        .menu {
            background: gray;
            padding-left: 10px;
            color: #e2e2e2;
            padding-bottom: 5px;
            padding-top: 5px;
        }

        .entity {
            color: white;
        }

        .fail {
            color: #d80a16;
        }

        .pass {
            color: #5e7d00;
        }

        .progress {
            color: black;
        }

        .stat {
            font-style: italic;
            font-weight: 100;
        }

        p {
            margin: 0px;
        }

        .info {
            float: right;
            font-weight: 100;
        }

        .spec:hover .toggle {
            display: inline;
        }

        .statusContainer {
            padding: 5px;
            font-weight: bolder;
        }

        .warning {
            color: grey;
            font-size: 12px;
            font-weight: 100;
        }
    </style>
</body>

</html>
`
